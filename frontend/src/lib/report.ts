import { PredictionResponse } from './api';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PatientDetails {
  name: string;
  age: number;
  gender: 'male' | 'female' | 'other';
  patientId: string;
  dateOfBirth: string;
  contactNumber: string;
  email: string;
  address: string;
  medicalHistory: string;
  currentMedications: string;
  allergies: string;
}

export interface ReportData {
  prediction: PredictionResponse;
  fileName: string;
  fileSize: string;
  uploadTime: string;
  analysisTime: string;
  patientDetails?: PatientDetails;
}

export const generateReport = (reportData: ReportData): string => {
  const { prediction, fileName, fileSize, uploadTime, analysisTime, patientDetails } = reportData;

  const confidence = (prediction.confidence * 100).toFixed(1);

  let report = `
RespireAI - Respiratory Analysis Report
=====================================

Report Generated: ${new Date().toLocaleString()}
Analysis ID: ${Date.now()}

`;

  // Add patient details if available
  if (patientDetails) {
    report += `
PATIENT INFORMATION
------------------
Name: ${patientDetails.name}
Age: ${patientDetails.age}
Gender: ${patientDetails.gender}
Patient ID: ${patientDetails.patientId}
Date of Birth: ${patientDetails.dateOfBirth}
Contact: ${patientDetails.contactNumber}
Email: ${patientDetails.email}
Address: ${patientDetails.address}

Medical History: ${patientDetails.medicalHistory}
Current Medications: ${patientDetails.currentMedications}
Allergies: ${patientDetails.allergies}

`;
  }

  report += `
AUDIO FILE INFORMATION
---------------------
File Name: ${fileName}
File Size: ${fileSize}
Upload Time: ${uploadTime}
Analysis Duration: ${analysisTime}

ANALYSIS RESULTS
---------------
Primary Pattern Detected: ${prediction.label}
Confidence Level: ${confidence}%
Pattern Description: ${prediction.description}

DETAILED BREAKDOWN
-----------------
${prediction.raw_predictions.map((prob, index) => {
    return `Class ${index}: ${(prob * 100).toFixed(1)}%`;
  }).join('\n')}

RECOMMENDATIONS
--------------
${getRecommendations(prediction.label, prediction.confidence)}

IMPORTANT DISCLAIMER
-------------------
This analysis is for demonstration purposes only and should not be used for medical diagnosis. 
Please consult a healthcare professional for proper medical evaluation and treatment.

For medical emergencies, contact emergency services immediately.

Report generated by RespireAI System
Version: 1.0.0
  `.trim();

  return report;
};

const getRecommendations = (label: string, confidence: number): string => {
  const confPct = (confidence * 100).toFixed(1);
  switch (label.toLowerCase()) {
    case 'normal':
      return `✅ Normal breathing detected (${confPct}% confidence).
• Continue monitoring your respiratory health
• Maintain good respiratory hygiene
• Schedule regular check-ups with your healthcare provider`;

    case 'wheezing':
      return `⚠️ Wheezing detected (${confPct}% confidence).
• Monitor symptoms closely
• Avoid known triggers (smoke, allergens, cold air)
• Consider consulting a pulmonologist
• Keep rescue inhaler accessible if prescribed`;

    case 'crackles':
      return `⚠️ Crackles detected (${confPct}% confidence).
• Seek medical attention promptly
• Monitor for fever, shortness of breath
• Avoid lying flat if experiencing difficulty breathing
• Consider chest X-ray evaluation`;

    case 'stridor':
      return `🚨 Stridor detected (${confPct}% confidence).
• Seek immediate medical attention
• This may indicate airway obstruction
• Call emergency services if experiencing severe symptoms
• Do not delay medical evaluation`;

    default:
      return `ℹ️ Pattern detected: ${label} (${confPct}% confidence).
Please monitor symptoms and consult a healthcare professional if concerned.`;
  }
};

export const downloadReport = (reportData: ReportData) => {
  const report = generateReport(reportData);
  const blob = new Blob([report], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `respireai-report-${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

export const downloadPDFReport = async (reportData: ReportData) => {
  try {
    const { prediction, fileName, fileSize, uploadTime, analysisTime, patientDetails } = reportData;

    const confidence = (prediction.confidence * 100).toFixed(1);

    // Create a temporary div for PDF generation
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.top = '-9999px';
    tempDiv.style.width = '800px';
    tempDiv.style.padding = '40px';
    tempDiv.style.fontFamily = 'Arial, sans-serif';
    tempDiv.style.fontSize = '12px';
    tempDiv.style.lineHeight = '1.4';
    tempDiv.style.backgroundColor = 'white';
    tempDiv.style.color = 'black';

    tempDiv.innerHTML = `
      <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #2563eb; padding-bottom: 20px;">
        <h1 style="color: #2563eb; margin: 0; font-size: 24px;">RespireAI - Respiratory Analysis Report</h1>
        <p style="margin: 5px 0; color: #666;">Report Generated: ${new Date().toLocaleString()}</p>
        <p style="margin: 5px 0; color: #666;">Analysis ID: ${Date.now()}</p>
      </div>
      
      ${patientDetails ? `
      <div style="margin-bottom: 25px;">
        <h2 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; font-size: 16px;">Patient Information</h2>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 10px;">
          <div><strong>Name:</strong> ${patientDetails.name}</div>
          <div><strong>Age:</strong> ${patientDetails.age}</div>
          <div><strong>Gender:</strong> ${patientDetails.gender}</div>
          <div><strong>Patient ID:</strong> ${patientDetails.patientId}</div>
          <div><strong>Date of Birth:</strong> ${patientDetails.dateOfBirth}</div>
          <div><strong>Contact:</strong> ${patientDetails.contactNumber}</div>
          <div><strong>Email:</strong> ${patientDetails.email}</div>
          <div><strong>Address:</strong> ${patientDetails.address}</div>
        </div>
        <div style="margin-top: 15px;">
          <div><strong>Medical History:</strong> ${patientDetails.medicalHistory}</div>
          <div><strong>Current Medications:</strong> ${patientDetails.currentMedications}</div>
          <div><strong>Allergies:</strong> ${patientDetails.allergies}</div>
        </div>
      </div>
      ` : ''}
      
      <div style="margin-bottom: 25px;">
        <h2 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; font-size: 16px;">Audio File Information</h2>
        <div style="margin-top: 10px;">
          <div><strong>File Name:</strong> ${fileName}</div>
          <div><strong>File Size:</strong> ${fileSize}</div>
          <div><strong>Upload Time:</strong> ${uploadTime}</div>
          <div><strong>Analysis Duration:</strong> ${analysisTime}</div>
        </div>
      </div>
      
      <div style="margin-bottom: 25px;">
        <h2 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; font-size: 16px;">Analysis Results</h2>
        <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 10px 0;">
          <div><strong>Primary Pattern Detected:</strong> ${prediction.label}</div>
          <div style="font-size: 14px; font-weight: bold; color: #059669;"><strong>Confidence Level:</strong> ${confidence}%</div>
          <div><strong>Pattern Description:</strong> ${prediction.description}</div>
        </div>
      </div>
      
      <div style="margin-bottom: 25px;">
        <h2 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; font-size: 16px;">Detailed Breakdown</h2>
        <div style="margin-top: 10px;">
          ${prediction.raw_predictions.map((prob, index) => {
            return `<div><strong>Class ${index}:</strong> ${(prob * 100).toFixed(1)}%</div>`;
          }).join('')}
        </div>
      </div>
      
      <div style="margin-bottom: 25px;">
        <h2 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; font-size: 16px;">Recommendations</h2>
        <div style="margin-top: 10px; white-space: pre-line;">${getRecommendations(prediction.label, prediction.confidence)}</div>
      </div>
      
      <div style="background: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 8px; margin-top: 30px;">
        <h3 style="margin: 0 0 10px 0; color: #92400e;">Important Disclaimer</h3>
        <p style="margin: 5px 0;">This analysis is for demonstration purposes only and should not be used for medical diagnosis.</p>
        <p style="margin: 5px 0;">Please consult a healthcare professional for proper medical evaluation and treatment.</p>
        <p style="margin: 5px 0;">For medical emergencies, contact emergency services immediately.</p>
      </div>
      
      <div style="text-align: center; margin-top: 40px; color: #6b7280; font-size: 10px;">
        <p>Report generated by RespireAI System | Version: 1.0.0</p>
      </div>
    `;

    document.body.appendChild(tempDiv);

    // Convert to canvas and then to PDF
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    document.body.removeChild(tempDiv);

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    const imgWidth = 210;
    const pageHeight = 295;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(`respireai-report-${new Date().toISOString().split('T')[0]}.pdf`);

  } catch (error) {
    console.error('Error generating PDF report:', error);
    // Fallback to text report
    downloadReport(reportData);
  }
};
